import kotlin.ranges.random

interface PigPlayer {
    
    fun playerName(): String?
    
    fun willPlay(goalTotal: Int, turnTotal: Int, currentTotal: Int, opponentTotal: Int): Boolean
    
}



class safePlayer : PigPlayer {
    
    override fun playerName(): String? {
        return "Safe Player"
    }
    
    
    
    override fun willPlay(goalTotal: Int, turnTotal: Int, currentTotal: Int, opponentTotal: Int): Boolean {
        
        if (turnTotal < 10) { //rolls until player reaches 10 on current turn
            return true
        }
        else {
            return false
        }
    } 
}

class bigPlayPlayer : PigPlayer {
        
    override fun playerName(): String? {
        return "Big Play Player"
    }
    
    
    
   override fun willPlay(goalTotal: Int, turnTotal: Int, currentTotal: Int, opponentTotal: Int): Boolean { //ensures the first bank is at least 33% of the goal, then only banks if turnTotal > 25
       
       	if (turnTotal + currentTotal < goalTotal/3) {
            return true
        }
        else if (turnTotal < goalTotal/4) {
            return true
        }
        else {
            return false
        }
	}
    
}

fun main() {
	var p1: PigPlayer?
 	var p2: PigPlayer?
    val goalTotal = 200
    var p1TurnTotal = 0
    var p2TurnTotal = 0
    var p1CurrentTotal = 0
    var p2CurrentTotal = 0
    var diNumber: Int
    p1 = safePlayer()
    p2 = bigPlayPlayer()
    var rolled1 = false
    
    
 	
    while (p1CurrentTotal < goalTotal || p2CurrentTotal < goalTotal) {
        
        while (p1.willPlay(goalTotal, p1TurnTotal, p1CurrentTotal, p2CurrentTotal) && rolled1 == false) { //rolls until a 1 is rolled or until p1 meets goal
        	println(p1.playerName() + " chose to roll again")
            diNumber = (1..6).random() //simulates rolling of a di
            if (diNumber != 1) {
                p1TurnTotal += diNumber
            }
            else {
                rolled1 = true
                p1TurnTotal = 0
            } 
        }
        println(p1.playerName() + " player passes")
        rolled1 = false
        p1CurrentTotal += p1TurnTotal
        
        while (p2.willPlay(goalTotal, p2TurnTotal, p2CurrentTotal, p1CurrentTotal) && rolled1 == false) { //rolls until a 1 is reached or until p2 meets goal
        	println(p2.playerName() + " player chose to roll again")
            diNumber = (1..6).random() //simulates rolling of a di
            if (diNumber != 1) {
                p2TurnTotal += diNumber
            }
            else {
                rolled1 = true
                p2TurnTotal = 0
            } 
        }
        println(p2.playerName() + " player passes")
        rolled1 = false
        p2CurrentTotal += p2TurnTotal
    }
    if (p1CurrentTotal > p2CurrentTotal) {
        println(p1.playerName() + " wins!")
    }
    else {
        println(p2.playerName() + " wins!")
    }
}